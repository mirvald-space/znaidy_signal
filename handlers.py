# handlers.py
import logging
from datetime import datetime
from string import Template
from typing import Any, Dict

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message, Update
from aiogram.utils.keyboard import InlineKeyboardBuilder

from trading.trading_system import TradingSystem
from utils.analytics_logger import AnalyticsLogger

logger = logging.getLogger(__name__)


class BotHandlers:
    def __init__(self, bot: Bot, symbols: list, update_interval: int):
        self.bot = bot
        self.router = Router()
        self.subscribers = set()
        self.symbols = symbols
        self.update_interval = update_interval
        self.setup_handlers()

    class MessageTemplates:
        START = Template("""
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
/symbols - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
/analysis - –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π""")

        STATUS = Template("""
üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: $subscribers
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: $symbols
–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $interval —Å–µ–∫—É–Ω–¥

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: $analyzed –∑–∞–ø–∏—Å–µ–π
–ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: $opportunities
–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: $trend_strength""")

        SYMBOL_INFO = Template("""$trend_emoji $symbol
   –¶–µ–Ω–∞: $price
   –¢—Ä–µ–Ω–¥: $trend
   –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: $suitable
""")

        ANALYSIS_HEADER = Template("""
üìà –ê–Ω–∞–ª–∏–∑ $symbol:
–¶–µ–Ω–∞: $price
–¢—Ä–µ–Ω–¥: $trend
–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: $strength
RSI: $rsi""")

        SIGNAL = Template("""
- $type ($reason)
  –í—Ö–æ–¥: $entry
  –°—Ç–æ–ø: $stop_loss
  –¶–µ–ª—å: $take_profit""")

    def get_statistics_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="24 —á–∞—Å–∞", callback_data="stats_1")
        builder.button(text="7 –¥–Ω–µ–π", callback_data="stats_7")
        builder.button(text="30 –¥–Ω–µ–π", callback_data="stats_30")
        builder.adjust(3)
        return builder.as_markup()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @self.router.message(Command("start"))
        async def cmd_start(message: Message):
            self.subscribers.add(message.from_user.id)
            await message.answer(self.MessageTemplates.START.substitute())

        @self.router.message(Command("stop"))
        async def cmd_stop(message: Message):
            self.subscribers.discard(message.from_user.id)
            await message.answer(
                "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
            )

        @self.router.message(Command("status"))
        async def cmd_status(message: Message):
            analytics = AnalyticsLogger()
            market_stats = analytics.get_market_statistics(1)

            status = self.MessageTemplates.STATUS.substitute(
                subscribers=len(self.subscribers),
                symbols=", ".join(self.symbols),
                interval=self.update_interval,
                analyzed=market_stats['records_analyzed'],
                opportunities=market_stats['trading_opportunities'],
                trend_strength="{:.2f}".format(
                    market_stats.get('avg_trend_strength', 0))
            )

            await message.answer(status)

        @self.router.message(Command("symbols"))
        async def cmd_symbols(message: Message):
            analytics = AnalyticsLogger()
            symbols_message = ["üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:\n"]

            for symbol in self.symbols:
                try:
                    trader = TradingSystem(symbol)
                    analysis = trader.analyze()

                    if analysis:
                        trend = analysis['context']['trend']
                        trend_emoji = "‚ÜóÔ∏è" if trend == "uptrend" else "‚ÜòÔ∏è" if trend == "downtrend" else "‚ÜîÔ∏è"

                        symbol_info = self.MessageTemplates.SYMBOL_INFO.substitute(
                            trend_emoji=trend_emoji,
                            symbol=symbol,
                            price="{:.2f}".format(analysis['latest_price']),
                            trend=trend,
                            suitable="‚úÖ" if analysis['context']['suitable_for_trading'] else "‚ùå"
                        )
                        symbols_message.append(symbol_info)
                except Exception as e:
                    symbols_message.append(
                        "{} - –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞\n".format(symbol))

            await message.answer("".join(symbols_message))

        @self.router.message(Command("stats"))
        async def cmd_stats(message: Message):
            await message.answer(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                reply_markup=self.get_statistics_keyboard()
            )

        @self.router.callback_query(F.data.startswith('stats_'))
        async def process_stats_callback(callback: CallbackQuery):
            days = int(callback.data.split('_')[1])
            analytics = AnalyticsLogger()

            signal_stats = analytics.get_signal_statistics(days)
            market_stats = analytics.get_market_statistics(days)

            period_name = "24 —á–∞—Å–∞" if days == 1 else "{} –¥–Ω–µ–π".format(days)

            stats_message = [
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {}:\n".format(period_name),
                "–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {}".format(signal_stats['total_signals']),
                "–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {:.2f}".format(
                    signal_stats.get('avg_strength', 0)),
                "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:"
            ]

            for type_, count in signal_stats.get('by_type', {}).items():
                stats_message.append("- {}: {}".format(type_, count))

            stats_message.extend([
                "\n–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {} –∑–∞–ø–∏—Å–µ–π".format(
                    market_stats['records_analyzed']),
                "–¢–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {}".format(
                    market_stats['trading_opportunities']),
                "–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {:.2f}".format(
                    market_stats.get('avg_trend_strength', 0)),
                "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤:"
            ])

            for trend, count in market_stats.get('trend_distribution', {}).items():
                stats_message.append("- {}: {}".format(trend, count))

            await callback.message.answer("\n".join(stats_message))
            await callback.answer()

        @self.router.message(Command("analysis"))
        async def cmd_analysis(message: Message):
            analysis_message = ["üìà –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:\n"]

            for symbol in self.symbols:
                try:
                    trader = TradingSystem(symbol)
                    analysis = trader.analyze()

                    if analysis:
                        header = self.MessageTemplates.ANALYSIS_HEADER.substitute(
                            symbol=symbol,
                            price="{:.2f}".format(analysis['latest_price']),
                            trend=analysis['context']['trend'],
                            strength="{:.2f}".format(
                                analysis['context']['strength']),
                            rsi="{:.2f}".format(analysis.get('rsi', 0))
                        )
                        analysis_message.append(header)

                        if analysis['signals']:
                            analysis_message.append("\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                            for signal in analysis['signals']:
                                signal_info = self.MessageTemplates.SIGNAL.substitute(
                                    type=signal['type'].upper(),
                                    reason=signal['reason'],
                                    entry="{:.2f}".format(signal['entry']),
                                    stop_loss="{:.2f}".format(
                                        signal['stop_loss']),
                                    take_profit="{:.2f}".format(
                                        signal['take_profit'])
                                )
                                analysis_message.append(signal_info)
                        else:
                            analysis_message.append("\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                        analysis_message.append("\n")

                except Exception as e:
                    analysis_message.append(
                        "\n{}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞\n".format(symbol))

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            await self.send_long_message(message, analysis_message)

        @self.router.message(Command("settings"))
        async def cmd_settings(message: Message):
            await message.answer(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
                "üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {} —Å–µ–∫—É–Ω–¥\n"
                "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {}\n"
                "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É".format(
                    self.update_interval,
                    ", ".join(self.symbols)
                )
            )

        @self.router.errors()
        async def handle_errors(update: Update, exception: Exception):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {}".format(
                str(exception))
            if update.message:
                await update.message.answer(error_message)
            logger.error(error_message, exc_info=True)

    async def send_long_message(self, message: Message, lines: list):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º"""
        max_length = 4096
        parts = []
        current_part = []
        current_length = 0

        for line in lines:
            line_length = len(line) + 1
            if current_length + line_length > max_length:
                parts.append("\n".join(current_part))
                current_part = [line]
                current_length = line_length
            else:
                current_part.append(line)
                current_length += line_length

        if current_part:
            parts.append("\n".join(current_part))

        for part in parts:
            await message.answer(part)

    def get_router(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
        return self.router

    def get_subscribers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return self.subscribers


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py:
"""
from aiogram import Bot, Dispatcher
from handlers import BotHandlers

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
handlers = BotHandlers(bot, SYMBOLS, UPDATE_INTERVAL)
dp = Dispatcher()
dp.include_router(handlers.get_router())

# –î–æ—Å—Ç—É–ø –∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
subscribers = handlers.get_subscribers()
"""
