import logging
from string import Template
from typing import Any, Dict, List, Set

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import TradingConfig
from trading.signal_formatter import format_signal_message
from trading.trading_system import TradingSystem
from utils.analytics_logger import AnalyticsLogger


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""
    START = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
/symbols - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
/analysis - –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    STATUS = Template("""
üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: $subscribers
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: $symbols
–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $interval —Å–µ–∫—É–Ω–¥

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: $analyzed –∑–∞–ø–∏—Å–µ–π
–ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: $opportunities
–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: $trend_strength""")

    SYMBOL_STATUS = Template("""$trend_emoji $symbol
   –¶–µ–Ω–∞: $price
   –¢—Ä–µ–Ω–¥: $trend
   –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: $suitable""")

    STOP = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
    STATS_PROMPT = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"

    SYMBOL_ERROR = Template("$symbol - –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: $error\n")
    SYMBOLS_HEADER = "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:\n"

    STATS_HEADER = Template("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ $period:\n")
    STATS_SIGNALS = Template(
        "–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: $total\n–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: $strength")
    STATS_TYPE_HEADER = "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:"
    STATS_TYPE_LINE = Template("- $type: $count")
    STATS_MARKET_HEADER = "\n–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    STATS_MARKET = Template("""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: $analyzed –∑–∞–ø–∏—Å–µ–π
–¢–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: $opportunities
–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: $trend_strength""")
    STATS_TRENDS_HEADER = "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤:"
    STATS_TREND_LINE = Template("- $trend: $count")

    ANALYSIS_HEADER = "üìà –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:\n"
    ANALYSIS_ERROR = Template("\n$symbol: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: $error")

    SETTINGS = Template("""‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $interval —Å–µ–∫—É–Ω–¥
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: $symbols
üìà –¢–∞–π–º—Ñ—Ä–µ–π–º: $timeframe

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É""")


class BotHandlers:
    def __init__(self, bot: Bot, config: TradingConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        self.bot = bot
        self.config = config
        self.router = Router()
        self.subscribers: Set[int] = set()
        self.analytics = AnalyticsLogger()
        self.setup_handlers()

    def get_statistics_keyboard(self) -> InlineKeyboardBuilder:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="24 —á–∞—Å–∞", callback_data="stats_1")
        builder.button(text="7 –¥–Ω–µ–π", callback_data="stats_7")
        builder.button(text="30 –¥–Ω–µ–π", callback_data="stats_30")
        builder.adjust(3)
        return builder.as_markup()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @self.router.message(Command("start"))
        async def cmd_start(message: Message):
            self.subscribers.add(message.from_user.id)
            await message.answer(MessageTemplates.START)

        @self.router.message(Command("stop"))
        async def cmd_stop(message: Message):
            self.subscribers.discard(message.from_user.id)
            await message.answer(MessageTemplates.STOP)

        @self.router.message(Command("status"))
        async def cmd_status(message: Message):
            market_stats = self.analytics.get_market_statistics(1)

            status = MessageTemplates.STATUS.substitute(
                subscribers=len(self.subscribers),
                symbols=", ".join(self.config.symbols),
                interval=self.config.update_interval,
                analyzed=market_stats['records_analyzed'],
                opportunities=market_stats['trading_opportunities'],
                trend_strength="{:.2f}".format(
                    market_stats.get('avg_trend_strength', 0))
            )

            await message.answer(status)

        @self.router.message(Command("symbols"))
        async def cmd_symbols(message: Message):
            symbols_message = [MessageTemplates.SYMBOLS_HEADER]

            for symbol in self.config.symbols:
                try:
                    trader = TradingSystem(symbol)
                    analysis = trader.analyze()

                    if analysis:
                        trend = analysis['context']['trend']
                        trend_emoji = self.get_trend_emoji(trend)

                        symbol_info = MessageTemplates.SYMBOL_STATUS.substitute(
                            trend_emoji=trend_emoji,
                            symbol=symbol,
                            price="{:.2f}".format(analysis['latest_price']),
                            trend=trend,
                            suitable="‚úÖ" if analysis['context']['suitable_for_trading'] else "‚ùå"
                        )
                        symbols_message.append(symbol_info)
                except Exception as e:
                    symbols_message.append(MessageTemplates.SYMBOL_ERROR.substitute(
                        symbol=symbol,
                        error=str(e)
                    ))

            await message.answer("\n".join(symbols_message))

        @self.router.message(Command("stats"))
        async def cmd_stats(message: Message):
            await message.answer(
                MessageTemplates.STATS_PROMPT,
                reply_markup=self.get_statistics_keyboard()
            )

        @self.router.callback_query(F.data.startswith('stats_'))
        async def process_stats_callback(callback: CallbackQuery):
            days = int(callback.data.split('_')[1])
            period_name = "24 —á–∞—Å–∞" if days == 1 else f"{days} –¥–Ω–µ–π"

            signal_stats = self.analytics.get_signal_statistics(days)
            market_stats = self.analytics.get_market_statistics(days)

            stats_message = self.format_stats_message(
                period_name, signal_stats, market_stats
            )

            await callback.message.answer("\n".join(stats_message))
            await callback.answer()

        @self.router.message(Command("analysis"))
        async def cmd_analysis(message: Message):
            analysis_messages = await self.perform_market_analysis()
            for msg in analysis_messages:
                await message.answer(msg)

        @self.router.message(Command("settings"))
        async def cmd_settings(message: Message):
            settings = MessageTemplates.SETTINGS.substitute(
                interval=self.config.update_interval,
                symbols=", ".join(self.config.symbols),
                timeframe=self.config.timeframe
            )
            await message.answer(settings)

    @staticmethod
    def get_trend_emoji(trend: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞"""
        return {
            "uptrend": "‚ÜóÔ∏è",
            "downtrend": "‚ÜòÔ∏è"
        }.get(trend, "‚ÜîÔ∏è")

    def format_stats_message(self, period: str, signal_stats: Dict, market_stats: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        stats_message = [
            MessageTemplates.STATS_HEADER.substitute(period=period),
            MessageTemplates.STATS_SIGNALS.substitute(
                total=signal_stats['total_signals'],
                strength="{:.2f}".format(signal_stats.get('avg_strength', 0))
            ),
            MessageTemplates.STATS_TYPE_HEADER
        ]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤
        for type_, count in signal_stats.get('by_type', {}).items():
            stats_message.append(MessageTemplates.STATS_TYPE_LINE.substitute(
                type=type_,
                count=count
            ))

        # –†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_message.extend([
            MessageTemplates.STATS_MARKET_HEADER,
            MessageTemplates.STATS_MARKET.substitute(
                analyzed=market_stats['records_analyzed'],
                opportunities=market_stats['trading_opportunities'],
                trend_strength="{:.2f}".format(
                    market_stats.get('avg_trend_strength', 0))
            ),
            MessageTemplates.STATS_TRENDS_HEADER
        ])

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤
        for trend, count in market_stats.get('trend_distribution', {}).items():
            stats_message.append(MessageTemplates.STATS_TREND_LINE.substitute(
                trend=trend,
                count=count
            ))

        return stats_message

    async def perform_market_analysis(self) -> List[str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        analysis_message = [MessageTemplates.ANALYSIS_HEADER]
        current_message_length = 0
        messages = []

        for symbol in self.config.symbols:
            try:
                trader = TradingSystem(symbol)
                analysis = trader.analyze()

                if analysis:
                    symbol_analysis = format_signal_message(analysis)

                    if current_message_length + len(symbol_analysis) > 4000:
                        messages.append("\n".join(analysis_message))
                        analysis_message = []
                        current_message_length = 0

                    analysis_message.append(symbol_analysis)
                    current_message_length += len(symbol_analysis)

            except Exception as e:
                analysis_message.append(MessageTemplates.ANALYSIS_ERROR.substitute(
                    symbol=symbol,
                    error=str(e)
                ))

        if analysis_message:
            messages.append("\n".join(analysis_message))

        return messages

    def get_router(self) -> Router:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
        return self.router

    def get_subscribers(self) -> Set[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return self.subscribers
