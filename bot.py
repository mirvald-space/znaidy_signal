# bot.py
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from trading.trading_system import TradingSystem
from trading.signal_formatter import format_signal_message
from config import Config, load_config
from utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
SYMBOLS = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
UPDATE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
subscribers = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
config = load_config()
bot = Bot(token=config.tg_bot.token)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    subscribers.add(message.from_user.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞\n"
        "/symbols - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"
    )

@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    subscribers.discard(message.from_user.id)
    await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.")

@dp.message(Command("status"))
async def cmd_status(message: Message):
    status_message = [
        "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:",
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}",
        f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {', '.join(SYMBOLS)}",
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {UPDATE_INTERVAL} —Å–µ–∫—É–Ω–¥",
    ]
    await message.answer("\n".join(status_message))

@dp.message(Command("symbols"))
async def cmd_symbols(message: Message):
    symbols_message = [
        "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:",
        ""
    ]
    for symbol in SYMBOLS:
        symbols_message.append(f"‚Ä¢ {symbol}")
    await message.answer("\n".join(symbols_message))

async def send_signals():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    while True:
        try:
            logger.info("Starting signal analysis cycle")
            
            for symbol in SYMBOLS:
                try:
                    trader = TradingSystem(symbol)
                    analysis = trader.analyze()
                    
                    if not analysis:
                        logger.warning(f"No analysis results for {symbol}")
                        continue
                        
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = format_signal_message(analysis)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∏–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                    if analysis['signals'] or analysis['context']['suitable_for_trading']:
                        logger.info(f"Sending signals for {symbol} to {len(subscribers)} subscribers")
                        for user_id in subscribers:
                            try:
                                await bot.send_message(user_id, message)
                                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                            except Exception as e:
                                logger.error(f"Error sending message to {user_id}: {e}")
                    else:
                        logger.info(f"No significant signals for {symbol}")
                        
                except Exception as e:
                    logger.error(f"Error processing {symbol}: {e}")
                    continue
                    
            logger.info(f"Analysis cycle completed. Waiting {UPDATE_INTERVAL} seconds")
            await asyncio.sleep(UPDATE_INTERVAL)
            
        except Exception as e:
            logger.error(f"Error in send_signals: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π