# bot.py

import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import Config, load_config
from trading.signal_formatter import format_signal_message
from trading.trading_system import TradingSystem
from utils.analytics_logger import AnalyticsLogger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
SYMBOLS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT"]
UPDATE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
subscribers = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
config = load_config()
bot = Bot(token=config.tg_bot.token)
dp = Dispatcher()


def get_statistics_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="24 —á–∞—Å–∞", callback_data="stats_1")
    builder.button(text="7 –¥–Ω–µ–π", callback_data="stats_7")
    builder.button(text="30 –¥–Ω–µ–π", callback_data="stats_30")
    builder.adjust(3)
    return builder.as_markup()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    subscribers.add(message.from_user.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞\n"
        "/symbols - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        "/analysis - –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )


@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    subscribers.discard(message.from_user.id)
    await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.")


@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    analytics = AnalyticsLogger()
    status_message = [
        "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:",
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}",
        f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {', '.join(SYMBOLS)}",
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {UPDATE_INTERVAL} —Å–µ–∫—É–Ω–¥",
        "",
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:",
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    market_stats = analytics.get_market_statistics(1)
    status_message.extend([
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {market_stats['records_analyzed']} –∑–∞–ø–∏—Å–µ–π",
        f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {market_stats['trading_opportunities']}",
        f"–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {market_stats.get('avg_trend_strength', 0):.2f}"
    ])

    await message.answer("\n".join(status_message))


@dp.message(Command("symbols"))
async def cmd_symbols(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /symbols"""
    analytics = AnalyticsLogger()
    market_stats = analytics.get_market_statistics(1)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞

    symbols_message = ["üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:\n"]

    for symbol in SYMBOLS:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É
        trader = TradingSystem(symbol)
        analysis = trader.analyze()

        if analysis:
            trend = analysis['context']['trend']
            trend_emoji = "‚ÜóÔ∏è" if trend == "uptrend" else "‚ÜòÔ∏è" if trend == "downtrend" else "‚ÜîÔ∏è"
            suitable = "‚úÖ" if analysis['context']['suitable_for_trading'] else "‚ùå"

            symbols_message.append(
                f"{trend_emoji} {symbol}\n"
                f"   –¶–µ–Ω–∞: {analysis['latest_price']:.2f}\n"
                f"   –¢—Ä–µ–Ω–¥: {trend}\n"
                f"   –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {suitable}\n"
            )

    await message.answer("".join(symbols_message))


@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_statistics_keyboard()
    )


@dp.callback_query(lambda c: c.data.startswith('stats_'))
async def process_stats_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    days = int(callback_query.data.split('_')[1])
    analytics = AnalyticsLogger()

    signal_stats = analytics.get_signal_statistics(days)
    market_stats = analytics.get_market_statistics(days)

    period_name = "24 —á–∞—Å–∞" if days == 1 else f"{days} –¥–Ω–µ–π"

    stats_message = [
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}:\n",
        f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_stats['total_signals']}",
        f"–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_stats.get('avg_strength', 0):.2f}",
        "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:"
    ]

    for type_, count in signal_stats.get('by_type', {}).items():
        stats_message.append(f"- {type_}: {count}")

    stats_message.extend([
        "\n–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {market_stats['records_analyzed']} –∑–∞–ø–∏—Å–µ–π",
        f"–¢–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {market_stats['trading_opportunities']}",
        f"–°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {market_stats.get(
            'avg_trend_strength', 0):.2f}",
        "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤:"
    ])

    for trend, count in market_stats.get('trend_distribution', {}).items():
        stats_message.append(f"- {trend}: {count}")

    await callback_query.message.answer("\n".join(stats_message))
    await callback_query.answer()


@dp.message(Command("analysis"))
async def cmd_analysis(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analysis - —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä"""
    analysis_message = ["üìà –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:\n"]

    for symbol in SYMBOLS:
        try:
            trader = TradingSystem(symbol)
            analysis = trader.analyze()

            if analysis:
                analysis_message.append(f"\n{symbol}:")
                analysis_message.append(
                    f"–¶–µ–Ω–∞: {analysis['latest_price']:.2f}")
                analysis_message.append(
                    f"–¢—Ä–µ–Ω–¥: {analysis['context']['trend']}")
                analysis_message.append(
                    f"–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {analysis['context']['strength']:.2f}")
                analysis_message.append(f"RSI: {analysis.get('rsi', 0):.2f}")

                if analysis['signals']:
                    analysis_message.append("\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:")
                    for signal in analysis['signals']:
                        analysis_message.extend([
                            f"- {signal['type'].upper()} ({signal['reason']})",
                            f"  –í—Ö–æ–¥: {signal['entry']:.2f}",
                            f"  –°—Ç–æ–ø: {signal['stop_loss']:.2f}",
                            f"  –¶–µ–ª—å: {signal['take_profit']:.2f}"
                        ])
                else:
                    analysis_message.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

        except Exception as e:
            logger.error(f"Error analyzing {symbol}: {e}")
            analysis_message.append(f"\n{symbol}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4096
    message_parts = []
    current_part = []
    current_length = 0

    for line in analysis_message:
        line_length = len(line) + 1  # +1 –¥–ª—è \n
        if current_length + line_length > max_length:
            message_parts.append("\n".join(current_part))
            current_part = [line]
            current_length = line_length
        else:
            current_part.append(line)
            current_length += line_length

    if current_part:
        message_parts.append("\n".join(current_part))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    for part in message_parts:
        await message.answer(part)


async def send_signals():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    while True:
        try:
            logger.info("Starting signal analysis cycle")

            for symbol in SYMBOLS:
                try:
                    trader = TradingSystem(symbol)
                    analysis = trader.analyze()

                    if not analysis:
                        logger.warning(f"No analysis results for {symbol}")
                        continue

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = format_signal_message(analysis)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∏–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                    if analysis['signals'] or analysis['context']['suitable_for_trading']:
                        logger.info(f"Sending signals for {symbol} to {
                                    len(subscribers)} subscribers")
                        for user_id in subscribers:
                            try:
                                await bot.send_message(user_id, message)
                                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                                await asyncio.sleep(0.1)
                            except Exception as e:
                                logger.error(f"Error sending message to {
                                             user_id}: {e}")
                                if "blocked" in str(e).lower():
                                    subscribers.discard(user_id)
                    else:
                        logger.info(f"No significant signals for {symbol}")

                except Exception as e:
                    logger.error(f"Error processing {symbol}: {e}")
                    continue

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å
            if datetime.now().hour == 0:
                for symbol in SYMBOLS:
                    try:
                        trader = TradingSystem(symbol)
                        trader.cleanup_old_data(30)  # –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π
                    except Exception as e:
                        logger.error(
                            f"Error cleaning up data for {symbol}: {e}")

            logger.info(f"Analysis cycle completed. Waiting {
                        UPDATE_INTERVAL} seconds")
            await asyncio.sleep(UPDATE_INTERVAL)

        except Exception as e:
            logger.error(f"Error in send_signals: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


async def main():
    logging.info("Starting bot")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(send_signals())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
