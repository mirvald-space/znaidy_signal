# trading/signal_formatter.py
from datetime import datetime
from string import Template
from typing import Any, Dict


class SignalTemplate:
    # –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    HEADER = Template("""üíπ $symbol –ê–Ω–∞–ª–∏–∑
‚è∞ $timestamp
üíµ –¶–µ–Ω–∞: $price
üìä –û–±—ä–µ–º: $volume""")

    MARKET_CONTEXT = Template("""
üîç –†—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
- –¢—Ä–µ–Ω–¥: $trend
- –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: $trend_strength
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: $volatility
- –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–º–∞: $volume_status
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: $suitable""")

    SIGNAL = Template("""
–¢–∏–ø: $type
–ü—Ä–∏—á–∏–Ω–∞: $reason
–í—Ö–æ–¥: $entry
–°—Ç–æ–ø-–ª–æ—Å—Å: $stop_loss
–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: $take_profit
–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: $strength""")


def format_signal_message(analysis_result: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è Template strings"""

    if not analysis_result or 'symbol' not in analysis_result:
        return "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = SignalTemplate.HEADER.substitute(
        symbol=analysis_result['symbol'],
        timestamp=analysis_result['timestamp'].strftime('%Y-%m-%d %H:%M:%S'),
        price='{:.2f}'.format(analysis_result['latest_price']),
        volume='{:.2f}'.format(analysis_result['latest_volume'])
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = SignalTemplate.MARKET_CONTEXT.substitute(
        trend=analysis_result['context']['trend'],
        trend_strength='{:.2f}'.format(analysis_result['context']['strength']),
        volatility=analysis_result['context']['volatility'],
        volume_status=analysis_result['context']['volume'],
        suitable='‚úÖ' if analysis_result['context']['suitable_for_trading'] else '‚ùå'
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = [header, context]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if analysis_result['signals']:
        message_parts.append("\nüéØ –°–∏–≥–Ω–∞–ª—ã:")
        for signal in analysis_result['signals']:
            signal_text = SignalTemplate.SIGNAL.substitute(
                type=signal['type'].upper(),
                reason=signal['reason'],
                entry='{:.2f}'.format(signal['entry']),
                stop_loss='{:.2f}'.format(signal['stop_loss']),
                take_profit='{:.2f}'.format(signal['take_profit']),
                strength='{:.2f}'.format(signal['strength'])
            )
            message_parts.append(signal_text)
    else:
        message_parts.append("\nüî¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

    return "\n".join(message_parts)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'symbol': 'BTCUSDT',
        'timestamp': datetime.now(),
        'latest_price': 50000.00,
        'latest_volume': 1000.00,
        'context': {
            'trend': 'uptrend',
            'strength': 0.75,
            'volatility': 'normal',
            'volume': 'high',
            'suitable_for_trading': True
        },
        'signals': [{
            'type': 'long',
            'reason': 'RSI bounce',
            'entry': 50000.00,
            'stop_loss': 49500.00,
            'take_profit': 51000.00,
            'strength': 0.8
        }]
    }

    formatted_message = format_signal_message(test_data)
    print(formatted_message)
